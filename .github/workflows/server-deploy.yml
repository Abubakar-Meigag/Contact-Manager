name: Deploy to EC2 with Docker

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
            fetch-depth: 0
            submodules: true

      - name: List repository files
        run: ls -R

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        run: |

        Given the structure you provided, the docker build command needs to correctly reference the relative path to the Dockerfile and the build context from within the GitHub Actions environment.

        Since your Dockerfile is located within the Contact-Manager/server directory, you should set both the path to the Dockerfile and the build context accordingly.
        
        Hereâ€™s how to modify the GitHub Actions workflow:
        
        1. Set Build Context to Contact-Manager/server
        Since the Dockerfile is in Contact-Manager/server, set that directory as the context instead of the root directory. Also, explicitly specify the path to the Dockerfile using -f.
        
        Update the Build and push Docker image step:
        

      - name: Build and push Docker image
        run: |
            docker build -t flask-contact-manager -f Contact-Manager/server/Dockerfile Contact-Manager/server
            docker tag flask-contact-manager abubakarmeigag/flask-contact-manager
            docker push abubakarmeigag/flask-contact-manager
        
      - name: SSH and deploy on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USER }}
            key: ${{ secrets.EC2_SSH_KEY }}
            script: |
              docker build -t flask-contact-manager -f Contact-Manager/server 
              echo "${{ secrets.ENV_FILE_CONTENTS }}" > /home/ec2-user/.env
              docker stop flask-container || true
              docker rm flask-container || true
              docker run -d --name flask-container --env-file /home/ec2-user/.env -p 5000:5000 abubakarmeigag/flask-contact-manager
